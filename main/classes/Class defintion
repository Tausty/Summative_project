#include <iostream>
using namespace std;

class sword_slinger {
    public:
        double Projectile_damadge; // this is a damadge multiplyer to the already existing projectile class
        double Projectile_hit_effect_toggle = true; // this allowes the projetile the thing shoots to toggle a specific hit affect
        double Speed; 
        double Luck; // im unsure if i really want this, but my idea is that for every extra luck, your roll an extra time and then choose the more favoirable option
        double Hit_effectable = false; // if this thing can be targeted by a hit affect
        double Attack_speed; // the cap of your attack speed, every weopon is different
        double Projectile_speed; // another multiplier
        double Critcal_damadge_chance; // chance to do double damdge
        double Health;
        double Pos_x;
        double Pos_y;  
        double Powerup_pool=1;
        double increase_dclass1=true;
        double decrease_dclass2=true;
        double decrease_dclass3=true;
};
class magicslinger {
    public:
        double Projectile_damadge;
        double Projectile_hit_effect_toggle = true;
        double Speed;
        double Luck;
        double Hit_effectable = false;
        double Attack_speed;
        double Projectile_speed;
        double Critcal_damadge_chance;
        double Health;
        double Pos_x;
        double Pos_y;  
        double Powerup_pool=2;
        double decrease_dclass1=true;
        double increase_dclass2=true;
        double decrease_dclass3=true;
};
class gunslinger {
    public:
        double Projectile_damadge;
        double Projectile_hit_effect_toggle = true;
        double Speed;
        double Luck;
        double Hit_effectable = false;
        double Attack_speed;
        double Projectile_speed;
        double Critcal_damadge_chance;
        double Health;
        double Pos_x;
        double Pos_y;  
        double Powerup_pool=3 ;
        double decrease_dclass1=true;
        double decrease_dclass2=true;
        double increase_dclass3=true;
};
class Enemy {
    public:
        double Projectile_damadge;
        double Projectile_hit_effect_toggle = false;
        double Speed;
        double Luck;
        double Hit_effectable = false;
        double Attack_speed;
        double Projectile_speed;
        double Crit_chance;
        double Health;
        double Pos_x;
        double Pos_y;  
};

class Specific_Powerup {
    public:
        double Damadge_increase;
        double Speed_increase;
        double Hit_effect_time_increase;
        double Hit_effect_damadge_increase;
        double Hit_effect_CCtime_increase;
        double Hit_effect_attackspeed_increase;
        double Hit_effect_crit_chance_increase;
        double Projectile_speed_increase;
        double Crit_chance_increase;
        double Attack_speed_increase;
        double Projectile_range_increase;
        double Projectile_count_increase;
        double Luck_increase;
        double Picked_up = false;
        double Pos_x;
        double Pos_y;
};

class Global_powerup {
        double Projectile_damadge;
        double Projectile_hit_effect_toggle = false;
        double Speed;
        double Luck;
        double Hit_effectable = false;
        double Attack_speed;
        double Projectile_speed;
        double Crit_chance;
        double Health;
        double Pos_x;
        double Pos_y;  
};

class Specific_Powerup {
    public:
        double Damadge_increase;
        double Speed_increase;
        double hit_effect_time_increase;
        double Hit_effect_damadge_increase;
        double Hit_effect_CCtime_increase;
        double Hit_effect_attackspeed_increase;
        double Hit_effect_crit_chance_increase;
        double Projectile_speed_increase;
        double Crit_chance_increase;
        double Attack_speed_increase;
        double Projectile_range_increase;
        double Projectile_count_increase;
        double Luck_increase;
        double Picked_up = false;
        double Pos_x;
        double Pos_y;
};


class Projectile{
    double Damadge;
    double Speed;
    double Count;
    double Hit_affect_toggle = false; // false by default, changed by some stuff
    double Crit_chance;
    double Dclass; // which damdage class it is (magic, ranged, melee)
    double Range;
    double Pos_y;
    double Pos_x;
};

class Hiteffect{
    double Damage;
    double Time;
    double CCtime; // how much time it crowd controls
    double CCtype; // which type of crowd control (stun,slow,knockback, etc)
    double Dclass;
    double Crit_chance;
    double Pos_x;
    double Pos_y;
};

class Threats{
    double Size; // how big it is, they will probably always be 1x1
    double Walkibility = true; // can u passs through it, true for everything but walls 
    double Damadge;
    double Proc_time; // how long till the trap activates
    double Leavable_while_proc = true; // can u leave while the trap is activating, true for everthing exept holes
    double Teleport_player_out = false; // will the trap teleport you out on hit, false for everything exept holes
    double Pos_x;
    double Pos_y;
};

class chests {
    double content_type; // is it keys,powerups,weopons etc
    double mimic=false; // will it attack you if u get close or no
    double content_amount;
    double Pos_x;
    double Pos_y;

};

class shopslinger {
    double inventory_type; // shopkeepers will have a theme, ie a healing shop, weopon shop, etc
    double slot_1_item;
    double slot_2_item;
    double slot_3_item;
    double slot_1_price;
    double slot_2_price;
    double slot_3_price;
    double anger; // price multiplyer based on enemys killed 
    double Pos_x;
    double Pos_y;
};
